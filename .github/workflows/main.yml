name: Check & test & build
on:
  push:
    branches:
      - master
      - main
  pull_request:

jobs:
  version_check:
    name: Validate VERSION change
    runs-on: ubuntu-latest
    # Only run this check for PRs, not direct pushes to main
    if: github.event_name == 'pull_request'
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history to compare with base branch

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Check if VERSION file changed
        run: |
          # Get the base branch (usually main)
          BASE_BRANCH="${{ github.base_ref }}"

          # Check if VERSION file changed in this PR
          if git diff origin/$BASE_BRANCH...HEAD --name-only | grep -q "^VERSION$"; then
            echo "✅ VERSION file changed in this PR"
            
            # Validate the new version format
            NEW_VERSION=$(cat VERSION | tr -d '\n\r')
            echo "New version: $NEW_VERSION"
            
            # Validate version format using Python script
            python .github/scripts/version_utils.py validate "$NEW_VERSION"
            
            echo "✅ VERSION change is valid"
          else
            echo "❌ ERROR: VERSION file must be updated in every PR"
            echo "Please update the VERSION file to reflect your changes:"
            echo "  - Bug fixes: increment patch version (0.2.1 → 0.2.2)"
            echo "  - New features: increment minor version (0.2.1 → 0.3.0)"
            echo "  - Breaking changes: increment major version (0.2.1 → 1.0.0)"
            exit 1
          fi

  check:
    name: Quality & security checks
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Lint Go Code
        run: make check

  test:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Run unit tests
        run: make test-unit

  integration_test:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: [check]
    # Skip version_check dependency for direct pushes to main (not PRs)
    if: always() && (needs.check.result == 'success' || needs.check.result == 'skipped')
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Run integration tests
        run: make test-integration

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, integration_test]
    if: always() && (needs.test.result == 'success' && needs.integration_test.result == 'success')
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Build binaries
        run: make build
